directive @isAuthenticated on FIELD | FIELD_DEFINITION

directive @rateLimit(times: Int, delta: Int, key: String) on FIELD | FIELD_DEFINITION

scalar Date

enum Order {
	ASC
	DESC
}

type User {
	id: Int!
	name: String!
	password: String!
	createdAt: Date!
	updateAt: Date!
}

type Category {
	id: Int!
	name: String!
	posts: [Post!]!
}

type Post {
	id: Int!
	title: String!
	subTitle: String!
	content: String!
	views: Int!
	category: Category
	comments: [Comment!]!
	createdAt: Date!
	updateAt: Date!
}

type Comment {
	id: Int!
	name: String!
	content: String!
	email: String!
	host: String
	ip: String!
	post: Post!
	createdAt: Date!
}

type Message {
	id: Int!
	name: String!
	content: String!
	email: String!
	host: String
	ip: String!
	createdAt: Date!
}

type Info {
	id: Int!
	name: String!
	avatar: String!
	github: String!
	email: String!
	description: String!
}

type AuthPayLoad {
	token: String!
	user: User!
}

type OssPayLoad {
	accessKeyId: String!
	accessKeySecret: String!
	region: String!
	bucket: String!
}

type Notification {
	id: String!
	title: String!
	content: String!
	category: String!
	time: String!
}

input AuthInput {
	name: String!
	password: String!
}

input PostsInput {
	skip: Int
	take: Int
	contain: String
	order: Order
}

input MessageInput {
	skip: Int
	take: Int
	order: Order
}

input CreatePostInput {
	title: String!
	subTitle: String!
	content: String!
	category: String # 自动创建分类标签
}

input UpdatePostInput {
	id: Int!
	title: String
	subTitle: String
	content: String
	category: String # 自动创建分类标签
}

input CreateCommentInput {
	postId: Int!
	name: String!
	content: String!
	email: String!
	host: String
}

input CreateMessageInput {
	name: String!
	content: String!
	email: String!
	host: String
}

input UpdateInfoInput {
	name: String
	avatar: String
	github: String
	email: String
	description: String
}

type Query {
	me: User @isAuthenticated
	oss: OssPayLoad @isAuthenticated
	# Post
	posts(data: PostsInput): [Post!]!
	post(id: Int!): Post
	# Comment
	comments(postId: Int!): [Comment!]!
	comment(id: Int!): Comment
	# Message
	messages(data: MessageInput): [Message!]!
	message(id: Int!): Message
	# Notication
	notifications: [Notification!]!
	# Info
	info: Info
}

type Mutation {
	login(data: AuthInput!): AuthPayLoad!
		@rateLimit(times: 10, delta: 86400, key: "login1")
		@rateLimit(times: 1, delta: 1, key: "login2")
	userReset(data: AuthInput!): AuthPayLoad! @isAuthenticated
	# Post
	createPost(data: CreatePostInput!): Post! @isAuthenticated
	deletePost(id: Int!): Int! @isAuthenticated
	updatePost(data: UpdatePostInput!): Post! @isAuthenticated
	# Comment
	createComment(data: CreateCommentInput!): Comment!
		@rateLimit(times: 1, delta: 20, key: "comment1")
		@rateLimit(times: 5, delta: 86400, key: "comment2")
	deleteComments(ids: [Int!]!): Int! @isAuthenticated
	# Message
	createMessage(data: CreateMessageInput!): Message!
		@rateLimit(times: 1, delta: 20, key: "message1")
		@rateLimit(times: 5, delta: 86400, key: "message2")
	deleteMessages(ids: [Int!]!): Int! @isAuthenticated
	# Notication
	deleteNotification(id: String!): Boolean @isAuthenticated
	clearNotification: Boolean @isAuthenticated
	# Info
	updateInfo(data: UpdateInfoInput!): Info! @isAuthenticated
}

type Subscription {
	notification: Notification!
}
